[{"C:\\Users\\AIDA\\trello-test-react-redax\\src\\index.js":"1","C:\\Users\\AIDA\\trello-test-react-redax\\src\\App.js":"2","C:\\Users\\AIDA\\trello-test-react-redax\\src\\reportWebVitals.js":"3","C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\index.js":"4","C:\\Users\\AIDA\\trello-test-react-redax\\src\\pages\\BoardTrello\\BoardTrello.js":"5","C:\\Users\\AIDA\\trello-test-react-redax\\src\\components\\List\\List.js":"6","C:\\Users\\AIDA\\trello-test-react-redax\\src\\components\\Card\\Card.js":"7","C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\actions\\actions.js":"8","C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\constants.js":"9","C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\reducers\\reducer.js":"10","C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\reducers\\listReducer.js":"11","C:\\Users\\AIDA\\trello-test-react-redax\\src\\components\\common  component\\CommonAddButton.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":261,"mtime":1607778931742,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":833,"mtime":1607787837317,"results":"17","hashOfConfig":"14"},{"size":1816,"mtime":1607865027793,"results":"18","hashOfConfig":"14"},{"size":2320,"mtime":1607865665402,"results":"19","hashOfConfig":"14"},{"size":1337,"mtime":1607859456789,"results":"20","hashOfConfig":"14"},{"size":573,"mtime":1607859904870,"results":"21","hashOfConfig":"14"},{"size":372,"mtime":1607859850693,"results":"22","hashOfConfig":"14"},{"size":182,"mtime":1607858354248,"results":"23","hashOfConfig":"14"},{"size":2843,"mtime":1607865628943,"results":"24","hashOfConfig":"14"},{"size":3989,"mtime":1607858327281,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bko7aa",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},"C:\\Users\\AIDA\\trello-test-react-redax\\src\\index.js",[],["52","53"],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\App.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\reportWebVitals.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\index.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\pages\\BoardTrello\\BoardTrello.js",["54"],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\components\\List\\List.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\components\\Card\\Card.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\actions\\actions.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\constants.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\reducers\\reducer.js",[],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\store\\reducers\\listReducer.js",["55","56","57"],"C:\\Users\\AIDA\\trello-test-react-redax\\src\\components\\common  component\\CommonAddButton.js",["58","59","60","61"],"import React, { useEffect, useState } from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Button from '@material-ui/core/Button';\r\nimport { addNewCard, addNewList, deleteList } from '../../store/actions/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst CommonAddButton = ({ buttonName, listId }) => {\r\n    const [isOpenNewField, setIsOpenNewField] = useState(false);\r\n    const [isNewText, setIsNewText] = useState('');\r\n    const dispatch = useDispatch();\r\n    console.log(buttonName, 'buttonName')\r\n\r\n    const openInputCommon = () => {\r\n        setIsOpenNewField(true);\r\n    }\r\n\r\n    const widthButton = (buttonName === 'list' ? 150 : 275);\r\n\r\n    return (\r\n        <div\r\n            style={buttonName !== 'list' ? styles.buttonCard : styles.buttonList}\r\n            onClick={openInputCommon}\r\n        >\r\n            {isOpenNewField ?\r\n                <div style={buttonName !== 'list' ? {\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                } : {\r\n                    display: 'flex',\r\n                        flexDirection: 'row',\r\n                    }} >\r\n                    <TextareaAutosize\r\n                        aria-label=\"empty textarea\"\r\n                        placeholder=\"Empty\"\r\n                        autoFocus\r\n                        onBlur={() => setIsOpenNewField(false)}\r\n                        onChange={(e) => setIsNewText(e.target.value)}\r\n                        style={{\r\n                            resize: 'none',\r\n                            width: widthButton,\r\n                            outline: 'none',\r\n                            border: 'none',\r\n                            borderRadius: 4,\r\n                            minHeight: 30,\r\n                        }}\r\n                    />\r\n                    <Button variant=\"contained\"\r\n                        onMouseDown={() => {\r\n                            if (isNewText) {\r\n                                if (buttonName === 'list') {\r\n                                    setIsNewText('');\r\n                                    dispatch(addNewList({ id: `list.${nanoid(8)}`, isNewText }));\r\n                                } else {\r\n                                    setIsNewText('');\r\n                                    dispatch(addNewCard({ id: nanoid(8), title: isNewText, listId }));\r\n                                }\r\n                            }\r\n                        }}\r\n                        size=\"small\"\r\n                        style={{\r\n                            width: 150,\r\n                        }}>\r\n                        Add {buttonName}\r\n                    </Button>\r\n                </div>              \r\n                :\r\n                <div style={styles.addStyles}>\r\n                    <AddIcon />\r\n                    <p> Add new {buttonName}</p>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nconst styles = {\r\n    buttonCard: {\r\n        color: 'white',\r\n        backgroundColor: 'inherit',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignSelf: 'flex-start',\r\n        marginLeft: 10,\r\n    },\r\n    buttonList: {\r\n        color: 'inherit',\r\n        backgroundColor: '#808080',\r\n        opacity: 0.5,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: 6,\r\n        height: 30,\r\n    },\r\n    inputContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    addStyles: {\r\n        width: 275,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n    }\r\n};\r\n\r\nexport default React.memo(CommonAddButton);",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"66","severity":1,"message":"70","line":4,"column":5,"nodeType":"68","messageId":"69","endLine":4,"endColumn":12},{"ruleId":"66","severity":1,"message":"71","line":11,"column":8,"nodeType":"68","messageId":"69","endLine":11,"endColumn":14},{"ruleId":"66","severity":1,"message":"72","line":65,"column":8,"nodeType":"68","messageId":"69","endLine":65,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"66","severity":1,"message":"73","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":18},{"ruleId":"66","severity":1,"message":"74","line":6,"column":34,"nodeType":"68","messageId":"69","endLine":6,"endColumn":44},{"ruleId":"66","severity":1,"message":"75","line":7,"column":23,"nodeType":"68","messageId":"69","endLine":7,"endColumn":34},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getList' is defined but never used.","'concat' is defined but never used.","'droppableId' is assigned a value but never used.","'DeleteIcon' is defined but never used.","'deleteList' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]